
syntax = "proto2";

enum SystemMessageType
{
    SYSTEM_BASE = 256 ;
    REGISTER_REQUEST = 257 ;
    REGISTER_RESPONSE = 258 ;
    STATUS_REQUEST = 259 ;
    STATUS_RESPONSE = 260 ;
    CONFIG_DATA_REQUEST = 261 ;
    CONFIG_DATA_RESPONSE = 262 ;
    HTTP_REQUEST = 263 ;

    VOTE_REQUEST = 265 ;    // VoteData
    VOTE_RESPONSE = 266 ;   // VoteResponse

    VOTE_NOTIFY = 267 ;     // VoteData

    PUSH_QUEUE_REQUEST = 269 ;    
    PUSH_QUEUE_RESPONSE = 270 ;   

    POP_QUEUE_REQUEST = 271 ;    
    POP_QUEUE_RESPONSE = 272 ;   

    SYNC_QUEUE_REQUEST = 273 ;    // SyncQueueRequest
    SYNC_QUEUE_RESPONSE = 274 ;   // SyncQueueData

    FORWARD_REQUEST = 277 ;  //ForwardData
    FORWARD_RESPONSE = 278 ; //ForwardData

    BROADCAST_NOTIFY = 500 ;
    
}

enum SystemErrorType
{
    EC_SUCCESS = 0 ;
    EC_VOTE_FAILED = 257 ;
    EC_VOTE_LEADER_EXIST = 258 ;
}

message RegisterRequest
{
    required int32 node_type = 1 [default=0] ;
    required int32 node_id = 2 [default=0] ;

}

message RegisterResponse
{
    required int32 error_code = 1 [default=0] ;
}

message StatusRequest
{

}

message StatusResponse
{

}

message VoteData
{
    optional int32 vote_id = 1 [default=0];
    optional int32 node_id = 2 [default=0];
    optional int64 trans_id = 3 [default=0];
    optional int32 port = 4 [default=0];
    optional string host = 5 [default=""];

}

message VoteResponse
{
    required int32 error_code = 1 [default=0] ;
    optional VoteData data = 2 ;
}


message SyncQueueRequest
{
    required int64 last_trans_id = 1 ;

}


message SyncQueueData 
{
    required int64 last_trans_id = 8 ;
    required int64 trans_id = 1 ;
    required string queue = 2 ; 
    required int32 op_type = 3 ;
    required int32 message_id = 4 ;
    optional int32 delay = 5 [default=0];
    optional int32 ttl = 6 [default=0];
    optional int32 retry = 7 [default=0]; 
    optional bytes data = 9 ; 
}

message ForwardData
{
    required bytes data = 1 ;
    required bytes source = 2 ;
    required int32 timestamp = 3 ;
}
